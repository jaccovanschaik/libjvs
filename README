This is the README for "libjvs".

Copyright: (c) 2013 Jacco van Schaik (jacco@jaccovanschaik.net)

Introduction
------------

Libjvs is a library of utilities in the C programming language. It is
distributed under the MIT license.

Instructions for use is (or should be) contained in the various .h
files. An overview of which source file contains what is provided below.

There are a few "ground rules" regarding use of the various structs and
functions contained herein:

* (Almost) all functions use a lower-case prefix to show which module
  they come from, followed by the rest of the name in camel-case.
  Functions internal to the module have the same prefix, but the rest of
  the name is underscore-separated lower case.
* There are a few functions that are meant to be called through a macro
  instead of directly by the user. These have a leading underscore.
* Abstract types (structs and enums) are typedef'ed so they can be
  referenced just by their name.
* If the definition of a struct is given in the .h file, it can be
  automatically allocated on the stack, *provided* that it is zeroed
  before use. Also be sure to clear their contents before the end of the
  scope, or you might end up with a memory leak.
* Many modules contain test code. When compiled with a macro TEST
  defined they include a main() function that calls a number of (ideally
  all) functions in the module with test data and checks the result. Use
  "make test" to run all the available tests.
* I like variable argument lists. In some cases I use them to implement
  a prinf-like interface, in which case I try to use GCC's __attribute__
  syntax to check the format string against the arguments. In other
  cases I use them to be able to pass in an arbitrary number of
  arguments, in which case the end is usually marked using the END macro
  (defined in defs.h).
* Some "standard" functions:
  xCreate()     Create a new, empty <x>.
  xInit()       Initialize an <x>. Usually equivalent to setting it to
                all zeroes. Note: this does *not* clear its contents
                because it could easily contain random data.
  xClear()      Clear out the contents of an <x>. After this you should
                be able to free() the <x> without getting a memory leak.
  xDestroy()    Clear *and* free() an <x>.

Overview
--------

bitmask.c, bitmask.h
    Handles bitmasks of unlimited size.

buffer.c, buffer.h
    Provides growing byte buffers.

const.h
    Useful constants.
    
cx.c, cx.h
    Communications Exchange.

debug.c, debug.h
    Functions to assist in debugging.

defs.h
    Some useful definitions.

dp.c, dp.h
    Data parser.

hash.c, hash.h
    Provides hash tables.

list.c, list.h
    Provides linked lists.

log.c, log.h
    Provides logging functions.

net.c, net.h
    Provides general networking utilities.

tcp.c, tcp.h
    Provides TCP networking utilities.

udp.c, udp.h
    Provides UDP networking utilities.

units.h
    Provides conversion from/to SI units.

utils.c, utils.h
    General utilities.

vector.c, vector.h
    Provides some functions to work with arbitrary-size vectors.
